const dotenv = require('dotenv');
const mongoose = require('mongoose');

const app = require('../index');

var debug = require('debug')('api:server');
var http = require('http');


//conexion a la base de datos
dotenv.config({path: './config.env'});

const DB = process.env.DATABASE.replace(
    "<password>",
    process.env.DATABASEPASSWORD,
);

mongoose.connect(DB)
.then(() => console.log('Connection successful'))
.catch((err) => console.log(err))

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '9000');//revisar esto para el deploy
app.set('port', port);

app.set('trust proxy', 1);

//Create http server
var server = http.createServer(app);

//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error',onError);
server.on('listening',onListening);

//Normalize a port into a number, string, or false.
function normalizePort(val) {
    var port = parseInt(val, 10);
    if(isNaN(port)) {
        //named pipe
        return val;
    }
    if(port>=0) {
        //port number
        return port;
    }
    return false;
}
//Event listener for HTTP server "error" event.
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
      }
    
      var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
    
      // handle specific listen errors with friendly messages
      switch (error.code) {
        case "EACCES":
          console.error(bind + " requires elevated privileges");
          process.exit(1);
          break;
        case "EADDRINUSE":
          console.error(bind + " is already in use");
          process.exit(1);
          break;
        default:
          throw error;
      }
}
//Event listener for HTTP server "listening" event.
function onListening() {
    var addr = server.address();
    var bind = typeof addr ==='string' ? 'pipe '+addr : 'port '+addr.port;
    debug('Listening on '+bind);
}